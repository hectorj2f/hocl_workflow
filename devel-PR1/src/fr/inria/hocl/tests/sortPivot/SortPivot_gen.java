/*
* DO NOT EDIT
* this class has been generated by fr.inria.hocl.core.hoclc2j version0.1->0.2
* on Mon Sep 26 15:18:07 CEST 2011
*/

package fr.inria.hocl.tests.sortPivot;
import fr.inria.hocl.core.hocli.*;
import java.util.LinkedList;
import java.util.List;
import java.io.*;


public class SortPivot_gen extends Solution {

	public SortPivot_gen(){

		ExternalObject object;
		ReactionRule rule;
		String[] string;
		Tuple tuple;

		class Sort extends ReactionRule implements Serializable {
		
			
			public Sort(){
				super("sort", Shot.ONE_SHOT);
				setTrope(Trope.EXPANSER);
					AtomIterator[] _HOCL_atomIteratorArray0;
				_HOCL_atomIteratorArray0 = new AtomIterator[1];
				{
					class IteratorSolution0 extends IteratorForSolution {
						protected Permutation makeSubPermutation(){
							Permutation perm;
							AtomIterator[] _HOCL_atomIteratorArray0;
							_HOCL_atomIteratorArray0 = new AtomIterator[0];
							
							MoleculeIterator[] _HOCL_moleculeIteratorArray0 = new MoleculeIterator[1];
							_HOCL_moleculeIteratorArray0[0] = new MoleculeIterator(1); // w
							
							perm = newPermutation(_HOCL_atomIteratorArray0, _HOCL_moleculeIteratorArray0);
							return perm;
						}
					
					} // class IteratorSolution0
					_HOCL_atomIteratorArray0[0] = new IteratorSolution0();
				}
				MoleculeIterator[] _HOCL_moleculeIteratorArray1 = new MoleculeIterator[0];
				permutation = newPermutation(_HOCL_atomIteratorArray0, _HOCL_moleculeIteratorArray1);
			}
		
			public Sort clone() {
				 return new Sort();
			}
			public void addType(String s){}
		
			// compute result of the rule sort
			protected Molecule computeResult(){
				ExternalObject object;
				ReactionRule rule;
				String[] string;
				Tuple tuple;
				
				IteratorForSolution _HOCL_iteratorSolution0 = (IteratorForSolution)permutation.getAtomIterator(0);
				Molecule w = _HOCL_iteratorSolution0.getSubPermutation().getMatchedMolecule(0);
				Molecule mol0 = new Molecule();
				class _HOCL_RR1 extends ReactionRule implements Serializable {
				
					
					public _HOCL_RR1(){
						super("_HOCL_RR1", Shot.ONE_SHOT);
						setTrope(Trope.EXPANSER);
							AtomIterator[] _HOCL_atomIteratorArray2;
						_HOCL_atomIteratorArray2 = new AtomIterator[1];
						{
							class AtomIterator_p extends IteratorForExternal {
								public AtomIterator_p(){
									access = Access.REWRITE;
								}
								@Override
								public boolean conditionSatisfied() {
									Atom atom;
									boolean satisfied;
									atom = iterator.getElement();
									satisfied = false;
									if (atom instanceof ExternalObject
									  && ((ExternalObject)atom).getObject() instanceof Integer) {
										satisfied = true;
									}
									return satisfied;
								}
							
							} // end of class AtomIterator_p
							_HOCL_atomIteratorArray2[0] = new AtomIterator_p();
						}
						MoleculeIterator[] _HOCL_moleculeIteratorArray2 = new MoleculeIterator[0];
						permutation = newPermutation(_HOCL_atomIteratorArray2, _HOCL_moleculeIteratorArray2);
					}
				
					public _HOCL_RR1 clone() {
						 return new _HOCL_RR1();
					}
					public void addType(String s){}
				
					// compute result of the rule _HOCL_RR1
					protected Molecule computeResult(){
						ExternalObject object;
						ReactionRule rule;
						String[] string;
						Tuple tuple;
						
						Integer p = (Integer)((IteratorForExternal)permutation.getAtomIterator(0)).getObject();
						Molecule mol1 = new Molecule();
						class Greater extends ReactionRule implements Serializable {
						
							private final Integer p;
							
							public Greater(final Integer p){
								super("greater", Shot.N_SHOT);
								setTrope(Trope.REDUCER);
								this.p = p;
									AtomIterator[] _HOCL_atomIteratorArray3;
								_HOCL_atomIteratorArray3 = new AtomIterator[2];
								{
									class AtomIterator_x extends IteratorForExternal {
										public AtomIterator_x(){
											access = Access.REWRITE;
										}
										@Override
										public boolean conditionSatisfied() {
											Atom atom;
											boolean satisfied;
											atom = iterator.getElement();
											satisfied = false;
											if (atom instanceof ExternalObject
											  && ((ExternalObject)atom).getObject() instanceof Integer) {
												satisfied = true;
											}
											return satisfied;
										}
									
									} // end of class AtomIterator_x
									_HOCL_atomIteratorArray3[0] = new AtomIterator_x();
								}
								{
									AtomIterator[] _HOCL_atomIteratorArrayTuple0;
									_HOCL_atomIteratorArrayTuple0 = new AtomIterator[2];
									{
										class AtomIterator__HOCL_literal0 extends IteratorForExternal {
											public AtomIterator__HOCL_literal0(){
												access = Access.REWRITE;
											}
											@Override
											public boolean conditionSatisfied() {
												Atom atom;
												boolean satisfied;
												atom = iterator.getElement();
												satisfied = false;
												if (atom instanceof ExternalObject
												  && ((ExternalObject)atom).getObject() instanceof String) {
													
													IteratorForTuple _HOCL_tupleAtomIterator0 = (IteratorForTuple)permutation.getAtomIterator(1);
													String _HOCL_literal0 = (String)((IteratorForExternal)_HOCL_tupleAtomIterator0.getAtomIterator(0)).getObject();
													satisfied = _HOCL_literal0.equals("G");
												}
												return satisfied;
											}
										
										} // end of class AtomIterator__HOCL_literal0
										_HOCL_atomIteratorArrayTuple0[0] = new AtomIterator__HOCL_literal0();
									}
									{
										class IteratorSolution1 extends IteratorForSolution {
											protected Permutation makeSubPermutation(){
												Permutation perm;
												AtomIterator[] _HOCL_atomIteratorArray3;
												_HOCL_atomIteratorArray3 = new AtomIterator[0];
												
												MoleculeIterator[] _HOCL_moleculeIteratorArray3 = new MoleculeIterator[1];
												_HOCL_moleculeIteratorArray3[0] = new MoleculeIterator(1); // w
												
												perm = newPermutation(_HOCL_atomIteratorArray3, _HOCL_moleculeIteratorArray3);
												return perm;
											}
										
										} // class IteratorSolution1
										_HOCL_atomIteratorArrayTuple0[1] = new IteratorSolution1();
									}
									_HOCL_atomIteratorArray3[1] = new IteratorForTuple(_HOCL_atomIteratorArrayTuple0, Greater.this);
								}
								MoleculeIterator[] _HOCL_moleculeIteratorArray4 = new MoleculeIterator[0];
								permutation = newPermutation(_HOCL_atomIteratorArray3, _HOCL_moleculeIteratorArray4);
							}
						
							public Greater clone() {
								 return new Greater(0);
							}
							public void addType(String s){}
						
							// compute result of the rule greater
							protected Molecule computeResult(){
								ExternalObject object;
								ReactionRule rule;
								String[] string;
								Tuple tuple;
								
								IteratorForTuple _HOCL_tupleAtomIterator1 = (IteratorForTuple)permutation.getAtomIterator(1);
								IteratorForSolution _HOCL_iteratorSolution1 = (IteratorForSolution)_HOCL_tupleAtomIterator1.getAtomIterator(1);
								Molecule w = _HOCL_iteratorSolution1.getSubPermutation().getMatchedMolecule(0);
								Integer x = (Integer)((IteratorForExternal)permutation.getAtomIterator(0)).getObject();
								Molecule mol2 = new Molecule();
								Tuple tuple0 = new Tuple(2);
								tuple0.set(0, ExternalObject.getHOCL_TypeTranslation("G"));
								Solution solution0 = new Solution();
								{
									Molecule mol3 = new Molecule();
									if (ExternalObject.getHOCL_TypeTranslation(x) instanceof ExternalObject) {
										ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(x);
										mol3.add(auxObject);
										string = auxObject.getObject().getClass().toString().split("\\.");
										this.addType(string[string.length-1]);
									} else {
										mol3.add(ExternalObject.getHOCL_TypeTranslation(x));
									if(ExternalObject.getHOCL_TypeTranslation(x) instanceof Tuple) 
										this.addType("Tuple");
									}
									
									mol3.add(w);
									solution0.addMolecule(mol3);
								}
								tuple0.set(1, solution0);
								tuple = tuple0;
								mol2.add(tuple);
								this.addType("Tuple");
								
								
								return mol2;
							}
						
						} // end of class Greater
						
						rule = new Greater(p);
						mol1.add(rule);
						this.addType(rule.getName());
						
						
						class Lower extends ReactionRule implements Serializable {
						
							private final Integer p;
							
							public Lower(final Integer p){
								super("lower", Shot.N_SHOT);
								setTrope(Trope.REDUCER);
								this.p = p;
									AtomIterator[] _HOCL_atomIteratorArray5;
								_HOCL_atomIteratorArray5 = new AtomIterator[2];
								{
									class AtomIterator_x extends IteratorForExternal {
										public AtomIterator_x(){
											access = Access.REWRITE;
										}
										@Override
										public boolean conditionSatisfied() {
											Atom atom;
											boolean satisfied;
											atom = iterator.getElement();
											satisfied = false;
											if (atom instanceof ExternalObject
											  && ((ExternalObject)atom).getObject() instanceof Integer) {
												satisfied = true;
											}
											return satisfied;
										}
									
									} // end of class AtomIterator_x
									_HOCL_atomIteratorArray5[0] = new AtomIterator_x();
								}
								{
									AtomIterator[] _HOCL_atomIteratorArrayTuple1;
									_HOCL_atomIteratorArrayTuple1 = new AtomIterator[2];
									{
										class AtomIterator__HOCL_literal1 extends IteratorForExternal {
											public AtomIterator__HOCL_literal1(){
												access = Access.REWRITE;
											}
											@Override
											public boolean conditionSatisfied() {
												Atom atom;
												boolean satisfied;
												atom = iterator.getElement();
												satisfied = false;
												if (atom instanceof ExternalObject
												  && ((ExternalObject)atom).getObject() instanceof String) {
													
													IteratorForTuple _HOCL_tupleAtomIterator2 = (IteratorForTuple)permutation.getAtomIterator(1);
													String _HOCL_literal1 = (String)((IteratorForExternal)_HOCL_tupleAtomIterator2.getAtomIterator(0)).getObject();
													satisfied = _HOCL_literal1.equals("L");
												}
												return satisfied;
											}
										
										} // end of class AtomIterator__HOCL_literal1
										_HOCL_atomIteratorArrayTuple1[0] = new AtomIterator__HOCL_literal1();
									}
									{
										class IteratorSolution2 extends IteratorForSolution {
											protected Permutation makeSubPermutation(){
												Permutation perm;
												AtomIterator[] _HOCL_atomIteratorArray5;
												_HOCL_atomIteratorArray5 = new AtomIterator[0];
												
												MoleculeIterator[] _HOCL_moleculeIteratorArray5 = new MoleculeIterator[1];
												_HOCL_moleculeIteratorArray5[0] = new MoleculeIterator(1); // w
												
												perm = newPermutation(_HOCL_atomIteratorArray5, _HOCL_moleculeIteratorArray5);
												return perm;
											}
										
										} // class IteratorSolution2
										_HOCL_atomIteratorArrayTuple1[1] = new IteratorSolution2();
									}
									_HOCL_atomIteratorArray5[1] = new IteratorForTuple(_HOCL_atomIteratorArrayTuple1, Lower.this);
								}
								MoleculeIterator[] _HOCL_moleculeIteratorArray6 = new MoleculeIterator[0];
								permutation = newPermutation(_HOCL_atomIteratorArray5, _HOCL_moleculeIteratorArray6);
							}
						
							public Lower clone() {
								 return new Lower(0);
							}
							public void addType(String s){}
						
							// compute result of the rule lower
							protected Molecule computeResult(){
								ExternalObject object;
								ReactionRule rule;
								String[] string;
								Tuple tuple;
								
								IteratorForTuple _HOCL_tupleAtomIterator3 = (IteratorForTuple)permutation.getAtomIterator(1);
								IteratorForSolution _HOCL_iteratorSolution2 = (IteratorForSolution)_HOCL_tupleAtomIterator3.getAtomIterator(1);
								Molecule w = _HOCL_iteratorSolution2.getSubPermutation().getMatchedMolecule(0);
								Integer x = (Integer)((IteratorForExternal)permutation.getAtomIterator(0)).getObject();
								Molecule mol4 = new Molecule();
								Tuple tuple1 = new Tuple(2);
								tuple1.set(0, ExternalObject.getHOCL_TypeTranslation("L"));
								Solution solution1 = new Solution();
								{
									Molecule mol5 = new Molecule();
									if (ExternalObject.getHOCL_TypeTranslation(x) instanceof ExternalObject) {
										ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(x);
										mol5.add(auxObject);
										string = auxObject.getObject().getClass().toString().split("\\.");
										this.addType(string[string.length-1]);
									} else {
										mol5.add(ExternalObject.getHOCL_TypeTranslation(x));
									if(ExternalObject.getHOCL_TypeTranslation(x) instanceof Tuple) 
										this.addType("Tuple");
									}
									
									mol5.add(w);
									solution1.addMolecule(mol5);
								}
								tuple1.set(1, solution1);
								tuple = tuple1;
								mol4.add(tuple);
								this.addType("Tuple");
								
								
								return mol4;
							}
						
						} // end of class Lower
						
						rule = new Lower(p);
						mol1.add(rule);
						this.addType(rule.getName());
						
						
						Tuple tuple2 = new Tuple(2);
						tuple2.set(0, ExternalObject.getHOCL_TypeTranslation("G"));
						Solution solution2 = new Solution();
						{
							Molecule mol6 = new Molecule();
							solution2.addMolecule(mol6);
						}
						tuple2.set(1, solution2);
						tuple = tuple2;
						mol1.add(tuple);
						this.addType("Tuple");
						
						
						Tuple tuple3 = new Tuple(2);
						tuple3.set(0, ExternalObject.getHOCL_TypeTranslation("L"));
						Solution solution3 = new Solution();
						{
							Molecule mol7 = new Molecule();
							solution3.addMolecule(mol7);
						}
						tuple3.set(1, solution3);
						tuple = tuple3;
						mol1.add(tuple);
						this.addType("Tuple");
						
						
						if (ExternalObject.getHOCL_TypeTranslation(p) instanceof ExternalObject) {
							ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(p);
							mol1.add(auxObject);
							string = auxObject.getObject().getClass().toString().split("\\.");
							this.addType(string[string.length-1]);
						} else {
							mol1.add(ExternalObject.getHOCL_TypeTranslation(p));
						if(ExternalObject.getHOCL_TypeTranslation(p) instanceof Tuple) 
							this.addType("Tuple");
						}
						
						return mol1;
					}
				
				} // end of class _HOCL_RR1
				
				rule = new _HOCL_RR1();
				mol0.add(rule);
				this.addType(rule.getName());
				
				
				mol0.add(w);
				return mol0;
			}
		
		} // end of class Sort
		
		Molecule mol8 = new Molecule();
		Solution solution5 = new Solution();
		{
			Molecule mol9 = new Molecule();
			rule = new Sort();
			mol9.add(rule);
			this.addType(rule.getName());
			
			
			Solution solution4 = new Solution();
			{
				Molecule mol10 = new Molecule();
				if (ExternalObject.getHOCL_TypeTranslation(9) instanceof ExternalObject) {
					ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(9);
					mol10.add(auxObject);
					string = auxObject.getObject().getClass().toString().split("\\.");
					this.addType(string[string.length-1]);
				} else {
					mol10.add(ExternalObject.getHOCL_TypeTranslation(9));
				if(ExternalObject.getHOCL_TypeTranslation(9) instanceof Tuple) 
					this.addType("Tuple");
				}
				
				if (ExternalObject.getHOCL_TypeTranslation(1) instanceof ExternalObject) {
					ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(1);
					mol10.add(auxObject);
					string = auxObject.getObject().getClass().toString().split("\\.");
					this.addType(string[string.length-1]);
				} else {
					mol10.add(ExternalObject.getHOCL_TypeTranslation(1));
				if(ExternalObject.getHOCL_TypeTranslation(1) instanceof Tuple) 
					this.addType("Tuple");
				}
				
				if (ExternalObject.getHOCL_TypeTranslation(864) instanceof ExternalObject) {
					ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(864);
					mol10.add(auxObject);
					string = auxObject.getObject().getClass().toString().split("\\.");
					this.addType(string[string.length-1]);
				} else {
					mol10.add(ExternalObject.getHOCL_TypeTranslation(864));
				if(ExternalObject.getHOCL_TypeTranslation(864) instanceof Tuple) 
					this.addType("Tuple");
				}
				
				if (ExternalObject.getHOCL_TypeTranslation(1) instanceof ExternalObject) {
					ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(1);
					mol10.add(auxObject);
					string = auxObject.getObject().getClass().toString().split("\\.");
					this.addType(string[string.length-1]);
				} else {
					mol10.add(ExternalObject.getHOCL_TypeTranslation(1));
				if(ExternalObject.getHOCL_TypeTranslation(1) instanceof Tuple) 
					this.addType("Tuple");
				}
				
				if (ExternalObject.getHOCL_TypeTranslation(5) instanceof ExternalObject) {
					ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(5);
					mol10.add(auxObject);
					string = auxObject.getObject().getClass().toString().split("\\.");
					this.addType(string[string.length-1]);
				} else {
					mol10.add(ExternalObject.getHOCL_TypeTranslation(5));
				if(ExternalObject.getHOCL_TypeTranslation(5) instanceof Tuple) 
					this.addType("Tuple");
				}
				
				if (ExternalObject.getHOCL_TypeTranslation(43) instanceof ExternalObject) {
					ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(43);
					mol10.add(auxObject);
					string = auxObject.getObject().getClass().toString().split("\\.");
					this.addType(string[string.length-1]);
				} else {
					mol10.add(ExternalObject.getHOCL_TypeTranslation(43));
				if(ExternalObject.getHOCL_TypeTranslation(43) instanceof Tuple) 
					this.addType("Tuple");
				}
				
				if (ExternalObject.getHOCL_TypeTranslation(1) instanceof ExternalObject) {
					ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(1);
					mol10.add(auxObject);
					string = auxObject.getObject().getClass().toString().split("\\.");
					this.addType(string[string.length-1]);
				} else {
					mol10.add(ExternalObject.getHOCL_TypeTranslation(1));
				if(ExternalObject.getHOCL_TypeTranslation(1) instanceof Tuple) 
					this.addType("Tuple");
				}
				
				if (ExternalObject.getHOCL_TypeTranslation(8) instanceof ExternalObject) {
					ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(8);
					mol10.add(auxObject);
					string = auxObject.getObject().getClass().toString().split("\\.");
					this.addType(string[string.length-1]);
				} else {
					mol10.add(ExternalObject.getHOCL_TypeTranslation(8));
				if(ExternalObject.getHOCL_TypeTranslation(8) instanceof Tuple) 
					this.addType("Tuple");
				}
				
				if (ExternalObject.getHOCL_TypeTranslation(3081) instanceof ExternalObject) {
					ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(3081);
					mol10.add(auxObject);
					string = auxObject.getObject().getClass().toString().split("\\.");
					this.addType(string[string.length-1]);
				} else {
					mol10.add(ExternalObject.getHOCL_TypeTranslation(3081));
				if(ExternalObject.getHOCL_TypeTranslation(3081) instanceof Tuple) 
					this.addType("Tuple");
				}
				
				if (ExternalObject.getHOCL_TypeTranslation(135) instanceof ExternalObject) {
					ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(135);
					mol10.add(auxObject);
					string = auxObject.getObject().getClass().toString().split("\\.");
					this.addType(string[string.length-1]);
				} else {
					mol10.add(ExternalObject.getHOCL_TypeTranslation(135));
				if(ExternalObject.getHOCL_TypeTranslation(135) instanceof Tuple) 
					this.addType("Tuple");
				}
				
				if (ExternalObject.getHOCL_TypeTranslation(3) instanceof ExternalObject) {
					ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(3);
					mol10.add(auxObject);
					string = auxObject.getObject().getClass().toString().split("\\.");
					this.addType(string[string.length-1]);
				} else {
					mol10.add(ExternalObject.getHOCL_TypeTranslation(3));
				if(ExternalObject.getHOCL_TypeTranslation(3) instanceof Tuple) 
					this.addType("Tuple");
				}
				
				if (ExternalObject.getHOCL_TypeTranslation(48) instanceof ExternalObject) {
					ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(48);
					mol10.add(auxObject);
					string = auxObject.getObject().getClass().toString().split("\\.");
					this.addType(string[string.length-1]);
				} else {
					mol10.add(ExternalObject.getHOCL_TypeTranslation(48));
				if(ExternalObject.getHOCL_TypeTranslation(48) instanceof Tuple) 
					this.addType("Tuple");
				}
				
				if (ExternalObject.getHOCL_TypeTranslation(6351) instanceof ExternalObject) {
					ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(6351);
					mol10.add(auxObject);
					string = auxObject.getObject().getClass().toString().split("\\.");
					this.addType(string[string.length-1]);
				} else {
					mol10.add(ExternalObject.getHOCL_TypeTranslation(6351));
				if(ExternalObject.getHOCL_TypeTranslation(6351) instanceof Tuple) 
					this.addType("Tuple");
				}
				
				if (ExternalObject.getHOCL_TypeTranslation(1) instanceof ExternalObject) {
					ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(1);
					mol10.add(auxObject);
					string = auxObject.getObject().getClass().toString().split("\\.");
					this.addType(string[string.length-1]);
				} else {
					mol10.add(ExternalObject.getHOCL_TypeTranslation(1));
				if(ExternalObject.getHOCL_TypeTranslation(1) instanceof Tuple) 
					this.addType("Tuple");
				}
				
				if (ExternalObject.getHOCL_TypeTranslation(481) instanceof ExternalObject) {
					ExternalObject auxObject = (ExternalObject) ExternalObject.getHOCL_TypeTranslation(481);
					mol10.add(auxObject);
					string = auxObject.getObject().getClass().toString().split("\\.");
					this.addType(string[string.length-1]);
				} else {
					mol10.add(ExternalObject.getHOCL_TypeTranslation(481));
				if(ExternalObject.getHOCL_TypeTranslation(481) instanceof Tuple) 
					this.addType("Tuple");
				}
				
				solution4.addMolecule(mol10);
			}
			mol9.add(solution4);
			solution5.addMolecule(mol9);
		}
		mol8.add(solution5);
		class _HOCL_RR2 extends ReactionRule implements Serializable {
		
			
			public _HOCL_RR2(){
				super("_HOCL_RR2", Shot.ONE_SHOT);
				setTrope(Trope.OPTIMIZER);
					AtomIterator[] _HOCL_atomIteratorArray7;
				_HOCL_atomIteratorArray7 = new AtomIterator[1];
				{
					class IteratorSolution3 extends IteratorForSolution {
						protected Permutation makeSubPermutation(){
							Permutation perm;
							AtomIterator[] _HOCL_atomIteratorArray7;
							_HOCL_atomIteratorArray7 = new AtomIterator[2];
							{
								/* reaction rule pattern: no pattern class */
								_HOCL_atomIteratorArray7[0] = new IteratorForRule("greater",_HOCL_RR2.this);
							}
							{
								/* reaction rule pattern: no pattern class */
								_HOCL_atomIteratorArray7[1] = new IteratorForRule("lower",_HOCL_RR2.this);
							}
							MoleculeIterator[] _HOCL_moleculeIteratorArray7 = new MoleculeIterator[1];
							_HOCL_moleculeIteratorArray7[0] = new MoleculeIterator(1); // w
							
							perm = newPermutation(_HOCL_atomIteratorArray7, _HOCL_moleculeIteratorArray7);
							return perm;
						}
					
					} // class IteratorSolution3
					_HOCL_atomIteratorArray7[0] = new IteratorSolution3();
				}
				MoleculeIterator[] _HOCL_moleculeIteratorArray8 = new MoleculeIterator[0];
				permutation = newPermutation(_HOCL_atomIteratorArray7, _HOCL_moleculeIteratorArray8);
			}
		
			public _HOCL_RR2 clone() {
				 return new _HOCL_RR2();
			}
			public void addType(String s){}
		
			// compute result of the rule _HOCL_RR2
			protected Molecule computeResult(){
				ExternalObject object;
				ReactionRule rule;
				String[] string;
				Tuple tuple;
				
				IteratorForSolution _HOCL_iteratorSolution3 = (IteratorForSolution)permutation.getAtomIterator(0);
				Molecule w = _HOCL_iteratorSolution3.getSubPermutation().getMatchedMolecule(0);
				Molecule mol11 = new Molecule();
				mol11.add(w);
				return mol11;
			}
		
		} // end of class _HOCL_RR2
		
		rule = new _HOCL_RR2();
		mol8.add(rule);
		this.addType(rule.getName());
		
		
		this.addMolecule(mol8);
		this.addType("Solution");
		this.addType("Integer");
		this.addType("String");
		this.addType("Tuple");

	}

	public Molecule addElement(){
		String input = "";
		ExternalObject obj;
		ReactionRule r;
		Molecule mol = new Molecule();
		int choice;

		System.out.println("Create the element that you want to add/remove.\n");
		System.out.println("What kind of element you want to create? (input the number) \n ");
		System.out.println("Supported Elements:");
		System.out.println(this.displayTypes());

		try {
			input += new BufferedReader(new InputStreamReader(System.in)).readLine();
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		try{

			choice = Integer.decode(input);
			input = this.getiAllType(choice-1);
			if(input.length()==0)
				System.out.println("Null pointer!");
			else if (input.equals("Tuple")){
				mol = new Molecule();
				mol.add(generateTupleElement());

				}

			else if (input.equals("Solution")){
				mol = new Molecule();
				mol.add(generateSolutionElement());

				}

			else if (input.equals("String")){
				mol = new Molecule();
				obj = new ExternalObject(generateStringElement());
				mol.add(obj);
				}

			else if (input.equals("sort")){
				mol = new Molecule();
				r = new Sort();
				mol.add(r);
				}

			else if (input.equals("Integer")){
				mol = new Molecule();
				obj = new ExternalObject(generateIntegerElement());
				mol.add(obj);
				}

				else{
					Package pack = this.getClass().getPackage();
					String packageName = pack.getName();
					String ts = input.substring(0, 1).toUpperCase()+input.substring(1);
					ReactionRule m = (ReactionRule) Class.forName(packageName+"."+ts).newInstance();
 					mol.add(m);

					System.out.println("The new rule has been added!");
			}

		return mol;
		}

		catch  (Exception e) {

			System.out.println("Input Error! Please input *NUMBER* while not string!");			return mol;		}

	}


	public String generateStringElement() throws IOException{;
		System.out.println("Enter your String:\n");
		String input = new BufferedReader(new InputStreamReader(System.in)).readLine();
		return new String(input);

	}
	public Integer generateIntegerElement() throws IOException{;
		System.out.println("Enter your Integer:\n");
		String input = new BufferedReader(new InputStreamReader(System.in)).readLine();
		return new Integer(input);

	}


	public Tuple generateTupleElement() throws IOException{
		int num;
		String input;

		System.out.println("How many elements in the tuple?\n");
		input = new BufferedReader(new InputStreamReader(System.in)).readLine();
		num = Integer.decode(input);

		Tuple t = new Tuple (num);
		for (int i=0;i<num;i++){
			System.out.print("Enter the type for the ");
			int j = i % 10;
			if (j == 0)
				System.out.println((i+1) + "st element. \n");
			else if (j == 1)
				System.out.println((i+1) + "nd element. \n");
			else if (j == 2)
				System.out.println((i+1) + "rd element. \n");
			else 
				 System.out.println((i+1) + "th element. \n");
			System.out.println("Types:");
			System.out.println(this.displayTypes());
			input = new BufferedReader(new InputStreamReader(System.in)).readLine();

			while(input.length()==0){
				System.out.println("Enter the type of the element.");
				input = new BufferedReader(new InputStreamReader(System.in)).readLine();
			}
			 int choice = Integer.decode(input);
			 input = this.getiAllType(choice-1);
			if(input.equals("Tuple")){
				t.set(i, generateTupleElement());
			}

			else if(input.equals("Solution")){
					t.set(i, generateSolutionElement());
				}

			else if(input.equals("String")){
				t.set(i, new ExternalObject (generateStringElement()));
			}

			else if(input.equals("sort")){
				t.set(i, new Sort());
			}

			else if(input.equals("Integer")){
				t.set(i, new ExternalObject (generateIntegerElement()));
			}

		}
		return t;
	}



	public Solution generateSolutionElement() throws IOException{
		int sign = 0;
		String input;
		Solution sol = new Solution ();
		Molecule mol = new Molecule();
		while(sign == 0){
			System.out.println("Do you want to add an element in this solution? (y/n)");
			String stop = new BufferedReader(new InputStreamReader(System.in)).readLine();

			if (stop.equals("yes")||stop.equals("y")||stop.equals("YES")||stop.equals("Y")){
				System.out.println("Enter the type of the element.\n");
				System.out.println("Types:");
				System.out.println(this.displayTypes());
				input = new BufferedReader(new InputStreamReader(System.in)).readLine();

				while(input.length()==0){
					System.out.println("Enter the type of the element.");
					input = new BufferedReader(new InputStreamReader(System.in)).readLine();
				}
				int choice = Integer.decode(input);
				input = this.getiAllType(choice-1);
				if(input.equals("Tuple")){
					mol = new Molecule();
					mol.add(generateTupleElement());
					sol.addMolecule(mol);
				}

				else if(input.equals("Solution")){
					mol.add(generateSolutionElement());
					sol.addMolecule(mol);

				}

				else if(input.equals("String")){
					mol = new Molecule();
					mol.add(new ExternalObject (generateStringElement())) ;
					sol.addMolecule(mol);
				}

				else if(input.equals("sort")){
					mol = new Molecule();
					mol.add(new Sort());
					sol.addMolecule(mol);
				}

				else if(input.equals("Integer")){
					mol = new Molecule();
					mol.add(new ExternalObject (generateIntegerElement())) ;
					sol.addMolecule(mol);
				}

				else{
					try{
						String ts = input.substring(0, 1).toUpperCase()+input.substring(1);
						ReactionRule m = (ReactionRule) Class.forName(input).newInstance();
						mol.add(m);
						sol.addMolecule(mol);
					}catch(Exception e){
						System.out.println("Error: (Test1_gen.generateSolutionElement()): "+e+".");
					}
				}
			}

			else{sign=1;}

		}

		return sol;
	}
	public void addType(String s){
		int sign=0;

		if((this.getAllTypeSize()==0) && (!s.equals("TransferMolecule") && !s.contains("_HOCL_RR"))){
			this.addToAllTypes(s);
		}

		else{
			for (int i=0;i<this.getAllTypeSize();i++){
				if (this.getiAllType(i).equals(s)){
					sign=1;
					break;
				}
			}
			if ((sign==0) && (!s.equals("TransferMolecule") && !s.contains("_HOCL_RR"))){
				this.addToAllTypes(s);
			}
		}
	}

	public String displayTypes (){

		String types = "";

		if(this.getAllTypeSize()==0){
			types = "No element in the multi-set.\n";
		}
		else{
			for(int i=0;i<this.getAllTypeSize();i++){
				types += i+1 +": "+this.getiAllType(i)+";\n";
			}
		}
		return types;
	}
} // class SortPivot_gen

