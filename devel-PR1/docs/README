*******************************************************************************
*                                                                             *
*                HIGH ORDER CHEMICAL LANGUAGE README FILE                     *
*                                                                             *
*******************************************************************************

+----------+
| CONTENTS |
+----------+
  
  |--1. Installation
  |   |--1.1. Getting the package
  |   |--1.2. Package contents
  |   +--1.3. Installation procedure
  |--2. Compiling and running programs
  |   |--2.1. Simple use-case
  |   |--2.2. Changing the destination directory
  |   |--2.3. Custom classpaths
  |   |--2.4. Batch compilation
  |   |--2.5. HOCL libraries location
  |   +--2.6. Other argument switches
  |--3. Bugs
  +--4. Contact


+-----------------+
| 1. INSTALLATION |
+-----------------+
  
  1.1. Getting the package
  =========================
  
    TODO: To be determined !!!
    
  1.2. Package contents
  ======================
    
    The distribution package contains the following files:
      hocl.jar    - the archive containing the HOCL compiler and interpreter
                    binaries (in ByteCode format)
      hoclcompile - a utility to compile HOCL source files
      hoclrun     - a utility to run compiled HOCL programs
      install.sh  - the package's install script
    
  1.3. Installation procedure
  ============================
    
    The HOCL package comes in the form of a gzipped tarball archive. Thus, the
    first step consists in unpacking the archive:
        $ mkdir hocl
        $ tar xvzf hocl.tar.gz -C hocl/
    To install HOCL system-wide, run install.sh as root:
        # ./install.sh
    By default, this script installs HOCL in /usr/bin and /usr/lib directories.
    If you want to specify another prefix (other than /usr) you can do so by
    supplying the --prefix argument to the script, eg.
        # ./install.sh --prefix /usr/local
    If, however, you want to install the binaries and scripts into the root of
    the file system (i.e. /), you can do so by issuing:
        # ./install.sh --no-prefix
    

+-----------------------------------+
| 2. COMPILING AND RUNNING PROGRAMS |
+-----------------------------------+
  
  The HOCL suite ships with two utility scripts which help the user compile and
  run HOCL programs - hoclcompile and hoclrun. hoclcompile generates the Java
  source code for a given hocl source file. It then compiles the Java source
  code files into Java ByteCode. hoclrun executes the HOCL shell which contains
  the proper code needed to run the HOCL program.
  
  2.1. Simple use-case
  =====================
    
    In the simplest use-case scenario, the user starts with writing the HOCL
    code. After saving the code with a file name with .hocl as the extension,
    such file has to be compiled:
        $ hoclcompile
    Assuming the compilation finished without problems, a number of new Java
    source code files, as well as compiled Java classed, appeared in the
    working directory. Eg: you created the file example.hocl and declared a
    named rule myRule. Amongst others, the directory should contain the
    following files:
        MyRule.java         - the Java source code for the rule myRule
        Example_gen.java    - the Java code counterpart of the HOCL code
        RunExample_gen.java - the HOCL shell containing instructions on how to
                              run and manipulate the Example_gen class
        run-example.sh      - the wrapper script to facilitate the execution of
                              the RunExample_gen class
        bin/                - the directory containting the compiled classes
    To run the program you have two choices: run run-example.sh directly or
    invoke hoclrun. Both will end up executing the RunExample_gen class'
    main() method.
    
    In case your current working directory does not contain any HOCL source code
    files, you can supply them as an argument to the utilities:
        $ hoclcompile path/to/hocl/file
        $ hoclrun path/to/hocl/file
    
  2.2. Changing the destination directory
  ========================================
    
    Mixing source and binary files is a bad practice. Moreover, most developers
    have a designed directory for binaries (eg. the famous bin/ in Java
    development).
    hoclcompile lets the user alter the destination directory through the
    --destdir argument switch:
        $ hoclcompile --destdir path/to/dir
    If the directory doesn't exist, it will be created by the utility.
    In a developer's routine, compiling is one of the most common invariable
    tasks - more or less the same files get compiled and whose binaries get
    saved in the same directory. To avoid typing every time the same command
    (with the same destination directory) and to quicken the production cycle,
    hoclcompile allows a more permanent way of declaring the destination path -
    the user can declare it in the environment by setting the HOCL_DEST_DIR
    environment variable. In bash, one could do:
        $ export HOCL_DEST_DIR=path/to/bin/dir;
    Once the variable is set, hoclcompile will automatically use it as the
    destination path. Thus, the user doesn't have to worry about it any more and
    can simply issue:
        $ hoclcompile
    to compile the code and save the binaries in HOCL_DEST_DIR.
    
  2.3. Custom classpaths
  =======================
    
    HOCL programs may use arbitrary Java code and Java classes, which may not be
    available to the Java compiler directly. In such a case, a custom search
    path has to be supplied to the compiler. hoclcompile offers two argument
    switches to cope with this problem.
    The first one, --classpath, lets the user append additional paths/jars to
    the compiler's classpath. For example, to add a directory with compiled
    classes and a jar to the classpath, use the following syntax:
        $ hoclcompile --classpath path/to/the/dir:path/to/the/file.jar
    Please note that HOCL system jar and the destination directory for binaries
    are automatically added to the classpath.
    Sometimes, however, a program may need to include many java archives in
    order to function properly - such as when using different pre-compiled
    libraries and/or technologies (which is usually the case with Java
    development). It then becomes cumbersome and time-consuming to list all of
    the jars on the command line. To help the user, hoclcompile allows supplying
    the --jars argument, followed by a path. It will search recursively the path
    given by the user for java archives and include them automatically in the
    compiler's classpath. Suppose the following directory structure:
        dirA
          |--jarA.jar
          |--dirB
          |    |--jarB1.jar
          |    +--jarB2.jar
          +--dirC
               +--jarC.jar
    Issuing:
        $ hoclcompile --jars dirA
    will put all of the jars in the tree (jarA.jar, jarB1.jar, jarB2.jar and
    jarC.jar) in the compiler's classpath.
    Since both argument switches (--classpath and --jars) append information to
    the classpath, it is possible to use them interchangeably:
        $ hoclcompile --classpath dir1 --jars dirA --classpath dir2 --jars dirB
    
  2.4. Batch compilation
  =======================
    
    Bigger projects will, naturally, have more than one source code file,
    possibly ordered hierarchically in different directories. Through the
    --recursive argument switch, hoclcompile offers the possibility of batch
    compilation - if specified, all subdirectories will be visited and all HOCL
    source code files will be compiled. Consider the following structure:
        source
          |--subdir1
          |    |--src1.hocl
          |    +--src2.hocl
          |--subdir2
          |    |--src3.hocl
          |    +--src4.hocl
          +--subdir3
               +--src5.hocl
    Using:
        $ hoclcompile --recursive source
    it is possible to compile all of the HOCL source files found in source
    (src1-5.hocl).
    
  2.5. HOCL libraries location
  =============================
    
    When compiling and executing HOCL programs, the utilities look for the HOCL
    libraries in the current working directory, in the utilities' directory and
    in the installation directory of HOCL. Typically, the user will not have to
    worry about them (since the libraries will be found). However, there are
    scenarios in which the user wants to use an alternative version of the
    libraries, such as a version with add-ons, a modified-source version, etc.
    hoclcompile offers different ways to use an alternative bundle. The first
    amongst them is to place the new bundle in the utility's search path (as
    mentioned before) - hoclcompile will automatically detect and use it.
    One can also supply the path of the alternative version as an argument:
        $ hoclcompile --hocl-path dir/to/alt/version
    It will induce hoclcompile to use the libraries found in the directory.
    Finally, as a more permanent solution, an environment variable, HOCL_PATH,
    can be declared and exported to the environment with the path to the
    directory. Doing so avoids the need to specify the --hocl-path argument
    switch.
    
  2.6. Other argument switches
  =============================
    
    When compiling HOCL programs, hoclcompile stops when it encounters an error.
		Howbeit, developers may sometimes be aware of warnings and errors in the
    code, but still want to complete the compilation process. To disable
    compilation abortion, use the --force argument switch:
        $ hoclcompile --force
    which will 'force' hoclcompile to continue even in case of errors.
    
    Finally, the --help argument switch will give the user a very short overview
    of all available argument switches.
    

+---------+
| 3. BUGS |
+---------+
  
  In case you encounter a malfunction or a bug, please re-run the utility and
  add the --debug argument switch to it:
        $ hoclcompile --debug 1 <your arguments>
  Save the output and send it to hocl-users@lists.gforge.inria.fr
  

+------------+
| 4. CONTACT |
+------------+
  
  To get in touch with us you can:
    a) talk to us on IRC - #hocl on freenode.org
    b) subscribe to our users mailing list:
          http://lists.gforge.inria.fr/mailman/listinfo/hocl-users
